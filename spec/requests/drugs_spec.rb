require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/drugs", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Drug. As you add validations to Drug, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: 'Aspirina'
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response", :vcr do
      get drugs_url
      expect(response).to be_successful

      drugs = assigns(:drugs)
      expect(drugs).not_to be_nil
      expect(drugs.first.attributes).to match(
                                          {
                                            id: 1,
                                            name: "Neosaudina"
                                          }
                                        )
    end
  end

  describe "GET /show" do
    it "renders a successful response", :vcr do
      get drug_url(1)
      expect(response).to be_successful

      drug = assigns(:drug)
      expect(drug).not_to be_nil
      expect(drug.attributes).to match(
                                   {
                                     id: 1,
                                     name: "Neosaudina"
                                   }
                                 )
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_drug_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response", :vcr do
      get edit_drug_url(1)
      expect(response).to be_successful
      drug = assigns(:drug)
      expect(drug).not_to be_nil
      expect(drug.attributes).to match(
                                   {
                                     id: 1,
                                     name: "Neosaudina"
                                   }
                                 )
    end
  end

  describe "POST /create" do
    context "with valid parameters", :vcr do
      it "creates a new Drug" do
        post drugs_url, params: { drug: { name: "medicamentox" } }
        expect(response).to redirect_to('http://www.example.com/drugs.14')
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested drug", :vcr do
        patch drug_url(14), params: { drug: { id: 14, name: "aspirina_updated" } }

        drug = assigns(:drug)

        expect(drug.attributes).to match(
                                     {
                                       id: 14,
                                       name: "aspirina_updated"
                                     }
                                   )

        expect(response).to redirect_to(drug_url(14))
      end
    end
  end

  describe "DELETE /destroy", :vcr do
    it "destroys the requested drug" do
      delete drug_url(14)
      expect(response).to redirect_to(drugs_url)
    end
  end
end
