require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/patients", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Patient. As you add validations to Patient, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response", :vcr do
      get patients_url
      patients = assigns(:patients)
      expect(patients).not_to be_nil

      expected = {
        id: 19,
        cpf: '9180293812',
        email: 'rick@gmail.com',
        name: 'Ricardo',
        password: nil,
      }

      expect(patients.last.attributes).to match(expected)

      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response", :vcr do
      get patient_url(19)

      patient = assigns(:patient)
      expect(patient.attributes).to match(
                                      {
                                        id: 19,
                                        cpf: '9180293812',
                                        email: 'rick@gmail.com',
                                        name: 'Ricardo',
                                        password: nil,
                                      }
                                    )
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_patient_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response", :vcr do
      get edit_patient_url(19)
      expect(response).to be_successful

      patient = assigns(:patient)
      expect(patient).not_to be_nil
      expect(patient.attributes).to match(
                                      {
                                        id: 19,
                                        cpf: '9180293812',
                                        email: 'rick@gmail.com',
                                        name: 'Ricardo',
                                        password: nil,
                                      }
                                    )
    end
  end

  describe "POST /create" do
    it "creates a new Patient", :vcr do
      post patients_url, params: {
        patient: {
          cpf: '9190293812',
          email: 'alfredo@gmail.com',
          name: 'Alfredo',
          password: nil,
        }
      }

      expect(response).to redirect_to('http://www.example.com/patients/20')
    end
  end

  describe "PATCH /update" do
    it "updates the requested exam", :vcr do
      new_patient_params = {
        patient: {
          id: 2,
          name: 'roger',
          email: 'rogessonb@gmail.com',
          cpf: '40734097867',
          password: '123123',
        }
      }

      patch patient_url(2), params: new_patient_params

      patient = assigns(:patient)
      expect(patient.attributes)
        .to match(new_patient_params[:patient])
    end
  end

  describe "DELETE /destroy", :vcr do
    it "destroys the requested patient" do
      delete patient_url(20)
    end
  end
end
