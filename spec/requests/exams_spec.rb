require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/exams", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # exam. As you add validations to exam, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      result: '10%'
    }
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response", :vcr do
      get exams_url
      expect(response).to be_successful

      exams = assigns(:exams)
      expect(exams).not_to be_nil
      expected = {
        id: 5,
        date: "2022-03-13T19:56:18.593",
        result: nil
      }

      expect(exams.first.attributes).to match(expected)
    end
  end

  describe "GET /show" do
    it "renders a successful response", :vcr do
      get exam_url(1)
      expect(response).to be_successful

      exam = assigns(:exam)
      expect(exam).not_to be_nil
      expect(exam.attributes).to match(
                                   {
                                     id: 1,
                                     name: "Neosaudina"
                                   }
                                 )
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_exam_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response", :vcr do
      get edit_exam_url(1)
      expect(response).to be_successful
      exam = assigns(:exam)
      expect(exam).not_to be_nil
      expect(exam.attributes).to match(
                                   {
                                     id: 1,
                                     name: "Neosaudina"
                                   }
                                 )
    end
  end

  describe "POST /create" do
    context "with valid parameters", :vcr do
      it "creates a new exam" do
        post exams_url, params: {
          exam: {
            result: "17%",
            patient: {
              id: 1,
            },
            exam_type: {
              id: 5
            }
          }
        }

        exam = assigns(:exam)
        expect(exam.attributes)
          .to match(
            {
              id: 9,
              result: '17%',
              date: anything
            }
          )
        expect(response).to redirect_to('http://www.example.com/exams/9')
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested exam", :vcr do
        patch exam_url(14), params: { exam: { id: 14, name: "aspirina" } }
        expect(response).to redirect_to(exam_url(14))
      end
    end
  end

  describe "DELETE /destroy", :vcr do
    it "destroys the requested exam" do
      delete exam_url(14)
      expect(response).to redirect_to(exams_url)
    end
  end
end
