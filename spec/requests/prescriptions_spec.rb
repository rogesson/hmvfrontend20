require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/prescriptions", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Prescription. As you add validations to Prescription, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response", :vcr do
      get prescriptions_url
      prescriptions = assigns(:prescriptions)

      expected = {
        id: 22,
        date: nil,
        description: "tomar 1x ao dia"
      }

      expect(prescriptions.last.attributes).to match(expected)

      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response", :vcr do
      get prescription_url(22)
      prescription = assigns(:prescription)
      expected = {
        id: 22,
        date: nil,
        description: "tomar 1x ao dia"
      }
      expect(prescription.attributes).to match(expected)
    end
  end

  describe "GET /new" do
    it "renders a successful response", :vcr do
      get new_prescription_url
      prescription = assigns(:prescription)

      expected = {
        id: nil,
        date: nil,
        description: nil
      }

      expect(prescription.attributes).to match(expected)
    end
  end

  describe "GET /edit" do
    it "renders a successful response", :vcr do
      get edit_prescription_url(22)
      prescription = assigns(:prescription)
      expected = {
        id: 22,
        date: nil,
        description: "tomar 1x ao dia"
      }
      expect(prescription.attributes).to match(expected)
    end
  end

  describe "POST /create" do
    it "creates a new Prescription", :vcr do
      post prescriptions_url, params: {
        prescription: {
          description: "2x ao dia",
          patient: {
            id: 6
          },
          drug: {
            id: 11
          }
        }
      }
      expect(response).to redirect_to('http://www.example.com/prescriptions/23')
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested prescription" do
        prescription = Prescription.create! valid_attributes
        patch prescription_url(prescription), params: { prescription: new_attributes }
        prescription.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the prescription" do
        prescription = Prescription.create! valid_attributes
        patch prescription_url(prescription), params: { prescription: new_attributes }
        prescription.reload
        expect(response).to redirect_to(prescription_url(prescription))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        prescription = Prescription.create! valid_attributes
        patch prescription_url(prescription), params: { prescription: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested prescription", :vcr do
      delete prescription_url(21)
    end
  end
end
